#compdef pman

autoload -U is-at-least

_pman() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_pman_commands" \
"*::: :->pman" \
&& ret=0
    case $state in
    (pman)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-command-$line[1]:"
        case $line[1] in
            (completion)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_pman__completion_commands" \
"*::: :->completion" \
&& ret=0

    case $state in
    (completion)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-completion-command-$line[1]:"
        case $line[1] in
            (bash)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(zsh)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(elvish)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pman__completion__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-completion-help-command-$line[1]:"
        case $line[1] in
            (bash)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(zsh)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(elvish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(project)
_arguments "${_arguments_options[@]}" \
'-f+[Custom projects folder path]: : ' \
'--folder=[Custom projects folder path]: : ' \
'-s+[Custom symbolic link path]: : ' \
'--symlink=[Custom symbolic link path]: : ' \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'--notify[Send notification]' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_pman__project_commands" \
"*::: :->project" \
&& ret=0

    case $state in
    (project)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-project-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'-f+[Custom projects folder path]: : ' \
'--folder=[Custom projects folder path]: : ' \
'-s+[Custom symbolic link path]: : ' \
'--symlink=[Custom symbolic link path]: : ' \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'--notify[Send notification]' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(create-folders)
_arguments "${_arguments_options[@]}" \
'-f+[Custom projects folder path]: : ' \
'--folder=[Custom projects folder path]: : ' \
'-s+[Custom symbolic link path]: : ' \
'--symlink=[Custom symbolic link path]: : ' \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'--notify[Send notification]' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(select)
_arguments "${_arguments_options[@]}" \
'-f+[Custom projects folder path]: : ' \
'--folder=[Custom projects folder path]: : ' \
'-s+[Custom symbolic link path]: : ' \
'--symlink=[Custom symbolic link path]: : ' \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'--notify[Send notification]' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
'-f+[Custom projects folder path]: : ' \
'--folder=[Custom projects folder path]: : ' \
'-s+[Custom symbolic link path]: : ' \
'--symlink=[Custom symbolic link path]: : ' \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'--notify[Send notification]' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pman__project__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-project-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(create-folders)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(select)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(group)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_pman__group_commands" \
"*::: :->group" \
&& ret=0

    case $state in
    (group)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-group-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(select)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
'-c+[Custom configuration file]: : ' \
'--config=[Custom configuration file]: : ' \
'-i[Get the current group ID]' \
'--id[Get the current group ID]' \
'-n[Get the current group name]' \
'--name[Get the current group name]' \
'-p[Get the current group path]' \
'--path[Get the current group path]' \
'*-v[Sets the level of verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pman__group__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-group-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(select)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pman__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-help-command-$line[1]:"
        case $line[1] in
            (completion)
_arguments "${_arguments_options[@]}" \
":: :_pman__help__completion_commands" \
"*::: :->completion" \
&& ret=0

    case $state in
    (completion)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-help-completion-command-$line[1]:"
        case $line[1] in
            (bash)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(zsh)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(elvish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(project)
_arguments "${_arguments_options[@]}" \
":: :_pman__help__project_commands" \
"*::: :->project" \
&& ret=0

    case $state in
    (project)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-help-project-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(create-folders)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(select)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(group)
_arguments "${_arguments_options[@]}" \
":: :_pman__help__group_commands" \
"*::: :->group" \
&& ret=0

    case $state in
    (group)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pman-help-group-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(select)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_pman_commands] )) ||
_pman_commands() {
    local commands; commands=(
'completion:Generate Shell Completion' \
'project:Manages projects in groups' \
'group:Manages groups of projects' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman commands' commands "$@"
}
(( $+functions[_pman__completion__bash_commands] )) ||
_pman__completion__bash_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion bash commands' commands "$@"
}
(( $+functions[_pman__completion__help__bash_commands] )) ||
_pman__completion__help__bash_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion help bash commands' commands "$@"
}
(( $+functions[_pman__help__completion__bash_commands] )) ||
_pman__help__completion__bash_commands() {
    local commands; commands=()
    _describe -t commands 'pman help completion bash commands' commands "$@"
}
(( $+functions[_pman__completion_commands] )) ||
_pman__completion_commands() {
    local commands; commands=(
'bash:Bash Completion' \
'zsh:Zsh Completion' \
'fish:Fish Completion' \
'elvish:Elvish Completion' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman completion commands' commands "$@"
}
(( $+functions[_pman__help__completion_commands] )) ||
_pman__help__completion_commands() {
    local commands; commands=(
'bash:Bash Completion' \
'zsh:Zsh Completion' \
'fish:Fish Completion' \
'elvish:Elvish Completion' \
    )
    _describe -t commands 'pman help completion commands' commands "$@"
}
(( $+functions[_pman__help__project__create-folders_commands] )) ||
_pman__help__project__create-folders_commands() {
    local commands; commands=()
    _describe -t commands 'pman help project create-folders commands' commands "$@"
}
(( $+functions[_pman__project__create-folders_commands] )) ||
_pman__project__create-folders_commands() {
    local commands; commands=()
    _describe -t commands 'pman project create-folders commands' commands "$@"
}
(( $+functions[_pman__project__help__create-folders_commands] )) ||
_pman__project__help__create-folders_commands() {
    local commands; commands=()
    _describe -t commands 'pman project help create-folders commands' commands "$@"
}
(( $+functions[_pman__completion__elvish_commands] )) ||
_pman__completion__elvish_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion elvish commands' commands "$@"
}
(( $+functions[_pman__completion__help__elvish_commands] )) ||
_pman__completion__help__elvish_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion help elvish commands' commands "$@"
}
(( $+functions[_pman__help__completion__elvish_commands] )) ||
_pman__help__completion__elvish_commands() {
    local commands; commands=()
    _describe -t commands 'pman help completion elvish commands' commands "$@"
}
(( $+functions[_pman__completion__fish_commands] )) ||
_pman__completion__fish_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion fish commands' commands "$@"
}
(( $+functions[_pman__completion__help__fish_commands] )) ||
_pman__completion__help__fish_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion help fish commands' commands "$@"
}
(( $+functions[_pman__help__completion__fish_commands] )) ||
_pman__help__completion__fish_commands() {
    local commands; commands=()
    _describe -t commands 'pman help completion fish commands' commands "$@"
}
(( $+functions[_pman__group__get_commands] )) ||
_pman__group__get_commands() {
    local commands; commands=()
    _describe -t commands 'pman group get commands' commands "$@"
}
(( $+functions[_pman__group__help__get_commands] )) ||
_pman__group__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'pman group help get commands' commands "$@"
}
(( $+functions[_pman__help__group__get_commands] )) ||
_pman__help__group__get_commands() {
    local commands; commands=()
    _describe -t commands 'pman help group get commands' commands "$@"
}
(( $+functions[_pman__help__project__get_commands] )) ||
_pman__help__project__get_commands() {
    local commands; commands=()
    _describe -t commands 'pman help project get commands' commands "$@"
}
(( $+functions[_pman__project__get_commands] )) ||
_pman__project__get_commands() {
    local commands; commands=()
    _describe -t commands 'pman project get commands' commands "$@"
}
(( $+functions[_pman__project__help__get_commands] )) ||
_pman__project__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'pman project help get commands' commands "$@"
}
(( $+functions[_pman__group_commands] )) ||
_pman__group_commands() {
    local commands; commands=(
'new:Create a new group' \
'ls:List all available groups' \
'select:Select the current working project from all' \
'get:Get information about the current active group.
If no aditional argument is given, gets the name.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman group commands' commands "$@"
}
(( $+functions[_pman__help__group_commands] )) ||
_pman__help__group_commands() {
    local commands; commands=(
'new:Create a new group' \
'ls:List all available groups' \
'select:Select the current working project from all' \
'get:Get information about the current active group.
If no aditional argument is given, gets the name.' \
    )
    _describe -t commands 'pman help group commands' commands "$@"
}
(( $+functions[_pman__completion__help_commands] )) ||
_pman__completion__help_commands() {
    local commands; commands=(
'bash:Bash Completion' \
'zsh:Zsh Completion' \
'fish:Fish Completion' \
'elvish:Elvish Completion' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman completion help commands' commands "$@"
}
(( $+functions[_pman__completion__help__help_commands] )) ||
_pman__completion__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion help help commands' commands "$@"
}
(( $+functions[_pman__group__help_commands] )) ||
_pman__group__help_commands() {
    local commands; commands=(
'new:Create a new group' \
'ls:List all available groups' \
'select:Select the current working project from all' \
'get:Get information about the current active group.
If no aditional argument is given, gets the name.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman group help commands' commands "$@"
}
(( $+functions[_pman__group__help__help_commands] )) ||
_pman__group__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pman group help help commands' commands "$@"
}
(( $+functions[_pman__help_commands] )) ||
_pman__help_commands() {
    local commands; commands=(
'completion:Generate Shell Completion' \
'project:Manages projects in groups' \
'group:Manages groups of projects' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman help commands' commands "$@"
}
(( $+functions[_pman__help__help_commands] )) ||
_pman__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pman help help commands' commands "$@"
}
(( $+functions[_pman__project__help_commands] )) ||
_pman__project__help_commands() {
    local commands; commands=(
'new:Create a new project' \
'create-folders:Create folders for current working project' \
'select:Select the current working project from all' \
'get:Get the full path to the current working project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman project help commands' commands "$@"
}
(( $+functions[_pman__project__help__help_commands] )) ||
_pman__project__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pman project help help commands' commands "$@"
}
(( $+functions[_pman__group__help__ls_commands] )) ||
_pman__group__help__ls_commands() {
    local commands; commands=()
    _describe -t commands 'pman group help ls commands' commands "$@"
}
(( $+functions[_pman__group__ls_commands] )) ||
_pman__group__ls_commands() {
    local commands; commands=()
    _describe -t commands 'pman group ls commands' commands "$@"
}
(( $+functions[_pman__help__group__ls_commands] )) ||
_pman__help__group__ls_commands() {
    local commands; commands=()
    _describe -t commands 'pman help group ls commands' commands "$@"
}
(( $+functions[_pman__group__help__new_commands] )) ||
_pman__group__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'pman group help new commands' commands "$@"
}
(( $+functions[_pman__group__new_commands] )) ||
_pman__group__new_commands() {
    local commands; commands=()
    _describe -t commands 'pman group new commands' commands "$@"
}
(( $+functions[_pman__help__group__new_commands] )) ||
_pman__help__group__new_commands() {
    local commands; commands=()
    _describe -t commands 'pman help group new commands' commands "$@"
}
(( $+functions[_pman__help__project__new_commands] )) ||
_pman__help__project__new_commands() {
    local commands; commands=()
    _describe -t commands 'pman help project new commands' commands "$@"
}
(( $+functions[_pman__project__help__new_commands] )) ||
_pman__project__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'pman project help new commands' commands "$@"
}
(( $+functions[_pman__project__new_commands] )) ||
_pman__project__new_commands() {
    local commands; commands=()
    _describe -t commands 'pman project new commands' commands "$@"
}
(( $+functions[_pman__help__project_commands] )) ||
_pman__help__project_commands() {
    local commands; commands=(
'new:Create a new project' \
'create-folders:Create folders for current working project' \
'select:Select the current working project from all' \
'get:Get the full path to the current working project' \
    )
    _describe -t commands 'pman help project commands' commands "$@"
}
(( $+functions[_pman__project_commands] )) ||
_pman__project_commands() {
    local commands; commands=(
'new:Create a new project' \
'create-folders:Create folders for current working project' \
'select:Select the current working project from all' \
'get:Get the full path to the current working project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pman project commands' commands "$@"
}
(( $+functions[_pman__group__help__select_commands] )) ||
_pman__group__help__select_commands() {
    local commands; commands=()
    _describe -t commands 'pman group help select commands' commands "$@"
}
(( $+functions[_pman__group__select_commands] )) ||
_pman__group__select_commands() {
    local commands; commands=()
    _describe -t commands 'pman group select commands' commands "$@"
}
(( $+functions[_pman__help__group__select_commands] )) ||
_pman__help__group__select_commands() {
    local commands; commands=()
    _describe -t commands 'pman help group select commands' commands "$@"
}
(( $+functions[_pman__help__project__select_commands] )) ||
_pman__help__project__select_commands() {
    local commands; commands=()
    _describe -t commands 'pman help project select commands' commands "$@"
}
(( $+functions[_pman__project__help__select_commands] )) ||
_pman__project__help__select_commands() {
    local commands; commands=()
    _describe -t commands 'pman project help select commands' commands "$@"
}
(( $+functions[_pman__project__select_commands] )) ||
_pman__project__select_commands() {
    local commands; commands=()
    _describe -t commands 'pman project select commands' commands "$@"
}
(( $+functions[_pman__completion__help__zsh_commands] )) ||
_pman__completion__help__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion help zsh commands' commands "$@"
}
(( $+functions[_pman__completion__zsh_commands] )) ||
_pman__completion__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'pman completion zsh commands' commands "$@"
}
(( $+functions[_pman__help__completion__zsh_commands] )) ||
_pman__help__completion__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'pman help completion zsh commands' commands "$@"
}

if [ "$funcstack[1]" = "_pman" ]; then
    _pman "$@"
else
    compdef _pman pman
fi
